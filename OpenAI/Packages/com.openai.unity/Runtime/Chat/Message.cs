// Licensed under the MIT License. See LICENSE in the project root for license information.

using Newtonsoft.Json;
using System;
using UnityEngine;

namespace OpenAI.Chat
{
    [Serializable]
    public sealed class Message
    {
        internal Message(Delta other) => CopyFrom(other);

        /// <summary>
        /// Creates a new message to insert into a chat conversation.
        /// </summary>
        /// <param name="role">
        /// The <see cref="Chat.Role"/> of the author of this message.
        /// </param>
        /// <param name="content">
        /// The contents of the message.
        /// </param>
        /// <param name="name">
        /// Optional, The name of the author of this message.<br/>
        /// May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
        /// </param>
        /// <param name="function">
        /// The function that should be called, as generated by the model.
        /// </param>


        [SerializeField]
        [JsonProperty("role")]
        public Role role;

        [SerializeField]
        [JsonProperty("content")]
        public string content;

        [SerializeField]
        [JsonProperty("name")]
        public string name;

        [JsonProperty("function_call")]
        public Function function;

        [JsonConstructor]
        public Message(Role role, string content, string name = null, Function function = null)
        {
            this.role = role;
            this.content = content;
            this.name = name;
            this.function = function;
        }

        public override string ToString() => content ?? string.Empty;

        public static implicit operator string(Message message) => message.ToString();

        internal void CopyFrom(Delta other)
        {
            if (role == 0 &&
                other?.Role > 0)
            {
                role = other.Role;
            }

            if (!string.IsNullOrEmpty(other?.Content))
            {
                content += other.Content;
            }

            if (!string.IsNullOrWhiteSpace(other?.Name))
            {
                name = other.Name;
            }

            if (other?.Function != null)
            {
                if (function == null)
                {
                    function = new Function(other);
                }
                else
                {
                    function.CopyFrom(other);
                }
            }
        }
    }
}
